<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use App\Services\ServicioPlanificacionAutomatizada;
use App\Models\Parametro;
use App\Models\HistorialPlanificacion;
use Carbon\Carbon;
use Exception;

class EjecutarPlanificacionAutomatica extends Command
{
    /**
     * The name and signature of the console command.
     */
    protected $signature = 'sipat:planificar
                           {fecha? : Fecha para planificar (YYYY-MM-DD). Por defecto es ma√±ana}
                           {--dias=1 : N√∫mero de d√≠as a planificar desde la fecha inicial}
                           {--forzar : Forzar ejecuci√≥n aunque ya exista planificaci√≥n}
                           {--modo=automatico : Modo de ejecuci√≥n (automatico|manual|emergencia)}
                           {--notificar : Enviar notificaciones al completar}
                           {--validar-solo : Solo ejecutar validaciones sin generar plantilla}
                           {--optimizar : Aplicar optimizaciones adicionales}
                           {--debug : Mostrar informaci√≥n detallada de debug}
                           {--configuracion=* : Configuraciones espec√≠ficas (clave=valor)}';

    /**
     * The console command description.
     */
    protected $description = 'Ejecutar el sistema de planificaci√≥n automatizada de SIPAT';

    private $servicioPlanificacion;
    private $modoDebug = false;

    /**
     * Execute the console command.
     */
    public function handle(ServicioPlanificacionAutomatizada $servicioPlanificacion)
    {
        $this->servicioPlanificacion = $servicioPlanificacion;
        $this->modoDebug = $this->option('debug');

        $this->mostrarBanner();

        try {
            // Validar prerequisitos del sistema
            $this->validarPrerequisitos();

            // Procesar par√°metros de entrada
            $parametros = $this->procesarParametros();

            // Mostrar resumen de configuraci√≥n
            $this->mostrarResumenConfiguracion($parametros);

            // Solicitar confirmaci√≥n si es necesario
            if (!$this->confirmarEjecucion($parametros)) {
                $this->warn('‚ö†Ô∏è Ejecuci√≥n cancelada por el usuario');
                return Command::FAILURE;
            }

            // Ejecutar planificaci√≥n para cada d√≠a solicitado
            $resultados = [];
            $errores = [];

            for ($i = 0; $i < $parametros['dias']; $i++) {
                $fechaPlanificacion = $parametros['fecha_inicial']->copy()->addDays($i);

                $this->info("\nüóìÔ∏è Procesando planificaci√≥n para: {$fechaPlanificacion->format('Y-m-d')} ({$fechaPlanificacion->locale('es')->dayName})");

                try {
                    $resultado = $this->ejecutarPlanificacionDia($fechaPlanificacion, $parametros);
                    $resultados[] = $resultado;

                    $this->line("   ‚úÖ Completado exitosamente");

                } catch (Exception $e) {
                    $errores[] = [
                        'fecha' => $fechaPlanificacion->format('Y-m-d'),
                        'error' => $e->getMessage()
                    ];

                    $this->error("   ‚ùå Error: {$e->getMessage()}");

                    if ($this->modoDebug) {
                        $this->line("   üîç Debug: " . $e->getTraceAsString());
                    }
                }
            }

            // Mostrar resumen final
            $this->mostrarResumenFinal($resultados, $errores);

            // Enviar notificaciones si se solicit√≥
            if ($this->option('notificar')) {
                $this->enviarNotificaciones($resultados, $errores);
            }

            // Determinar c√≥digo de salida
            if (empty($errores)) {
                $this->info("\nüéâ Proceso completado exitosamente");
                return Command::SUCCESS;
            } elseif (count($errores) < count($resultados) + count($errores)) {
                $this->warn("\n‚ö†Ô∏è Proceso completado con errores parciales");
                return Command::SUCCESS; // √âxito parcial
            } else {
                $this->error("\nüí• Proceso fall√≥ completamente");
                return Command::FAILURE;
            }

        } catch (Exception $e) {
            $this->error("\nüí• Error cr√≠tico en el proceso: {$e->getMessage()}");

            if ($this->modoDebug) {
                $this->line("üîç Debug: " . $e->getTraceAsString());
            }

            return Command::FAILURE;
        }
    }

    /**
     * Mostrar banner inicial del comando
     */
    private function mostrarBanner()
    {
        $this->line('');
        $this->line('‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó');
        $this->line('‚ïë                 üöå SIPAT - PLANIFICACI√ìN AUTOM√ÅTICA          ‚ïë');
        $this->line('‚ïë              Sistema Inteligente de Planificaci√≥n            ‚ïë');
        $this->line('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù');
        $this->line('');
    }

    /**
     * Validar que el sistema est√© listo para ejecutar la planificaci√≥n
     */
    private function validarPrerequisitos()
    {
        $this->info('üîç Validando prerequisitos del sistema...');

        $validaciones = [
            'Base de datos' => $this->validarBaseDatos(),
            'Conductores disponibles' => $this->validarConductoresDisponibles(),
            'Configuraci√≥n del sistema' => $this->validarConfiguracion(),
            'Servicios dependientes' => $this->validarServicios()
        ];

        foreach ($validaciones as $nombre => $resultado) {
            if ($resultado['valido']) {
                $this->line("   ‚úÖ {$nombre}: {$resultado['mensaje']}");
            } else {
                $this->error("   ‚ùå {$nombre}: {$resultado['mensaje']}");
                throw new Exception("Prerequisito no cumplido: {$nombre}");
            }
        }

        $this->line('');
    }

    /**
     * Procesar y validar par√°metros de entrada
     */
    private function procesarParametros()
    {
        // Procesar fecha inicial
        $fechaTexto = $this->argument('fecha');
        if ($fechaTexto) {
            try {
                $fechaInicial = Carbon::createFromFormat('Y-m-d', $fechaTexto);
            } catch (Exception $e) {
                throw new Exception("Formato de fecha inv√°lido. Use YYYY-MM-DD");
            }
        } else {
            $fechaInicial = now()->addDay(); // Por defecto, planificar para ma√±ana
        }

        // Validar que no sea una fecha pasada (a menos que se fuerce)
        if ($fechaInicial->isPast() && !$this->option('forzar')) {
            throw new Exception("No se puede planificar para fechas pasadas. Use --forzar si es necesario.");
        }

        // Procesar n√∫mero de d√≠as
        $dias = (int) $this->option('dias');
        if ($dias < 1 || $dias > 30) {
            throw new Exception("El n√∫mero de d√≠as debe estar entre 1 y 30");
        }

        // Procesar configuraciones personalizadas
        $configuracionesPersonalizadas = [];
        foreach ($this->option('configuracion') as $config) {
            if (strpos($config, '=') === false) {
                throw new Exception("Formato de configuraci√≥n inv√°lido: {$config}. Use clave=valor");
            }

            list($clave, $valor) = explode('=', $config, 2);
            $configuracionesPersonalizadas[$clave] = $valor;
        }

        return [
            'fecha_inicial' => $fechaInicial,
            'dias' => $dias,
            'modo' => $this->option('modo'),
            'forzar' => $this->option('forzar'),
            'validar_solo' => $this->option('validar-solo'),
            'optimizar' => $this->option('optimizar'),
            'configuraciones_personalizadas' => $configuracionesPersonalizadas
        ];
    }

    /**
     * Mostrar resumen de la configuraci√≥n antes de ejecutar
     */
    private function mostrarResumenConfiguracion($parametros)
    {
        $this->info('üìã Configuraci√≥n de ejecuci√≥n:');
        $this->line("   ‚Ä¢ Fecha inicial: {$parametros['fecha_inicial']->format('Y-m-d')} ({$parametros['fecha_inicial']->locale('es')->dayName})");
        $this->line("   ‚Ä¢ D√≠as a procesar: {$parametros['dias']}");
        $this->line("   ‚Ä¢ Modo: {$parametros['modo']}");
        $this->line("   ‚Ä¢ Forzar ejecuci√≥n: " . ($parametros['forzar'] ? 'S√≠' : 'No'));
        $this->line("   ‚Ä¢ Solo validaciones: " . ($parametros['validar_solo'] ? 'S√≠' : 'No'));
        $this->line("   ‚Ä¢ Optimizaciones adicionales: " . ($parametros['optimizar'] ? 'S√≠' : 'No'));

        if (!empty($parametros['configuraciones_personalizadas'])) {
            $this->line("   ‚Ä¢ Configuraciones personalizadas:");
            foreach ($parametros['configuraciones_personalizadas'] as $clave => $valor) {
                $this->line("     - {$clave}: {$valor}");
            }
        }

        $this->line('');
    }

    /**
     * Solicitar confirmaci√≥n del usuario si es necesario
     */
    private function confirmarEjecucion($parametros)
    {
        // No pedir confirmaci√≥n en modo autom√°tico o si ya se forz√≥
        if ($parametros['modo'] === 'automatico' || $parametros['forzar']) {
            return true;
        }

        // Verificar si ya existe planificaci√≥n para alguna de las fechas
        $fechaFin = $parametros['fecha_inicial']->copy()->addDays($parametros['dias'] - 1);

        $planificacionesExistentes = HistorialPlanificacion::whereBetween('fecha_planificacion', [
            $parametros['fecha_inicial']->format('Y-m-d'),
            $fechaFin->format('Y-m-d')
        ])->where('estado', HistorialPlanificacion::ESTADO_COMPLETADO)->count();

        if ($planificacionesExistentes > 0) {
            $this->warn("‚ö†Ô∏è Se encontraron {$planificacionesExistentes} planificaciones existentes para el per√≠odo seleccionado.");
            return $this->confirm('¬øDesea continuar y sobrescribir las planificaciones existentes?');
        }

        return $this->confirm('¬øProceder con la planificaci√≥n autom√°tica?', true);
    }

    /**
     * Ejecutar planificaci√≥n para un d√≠a espec√≠fico
     */
    private function ejecutarPlanificacionDia($fechaPlanificacion, $parametros)
    {
        // Verificar si ya existe planificaci√≥n para esta fecha
        if (!$parametros['forzar']) {
            $existente = HistorialPlanificacion::where('fecha_planificacion', $fechaPlanificacion->format('Y-m-d'))
                                              ->where('estado', HistorialPlanificacion::ESTADO_COMPLETADO)
                                              ->first();
            if ($existente) {
                throw new Exception("Ya existe una planificaci√≥n completada para esta fecha. Use --forzar para sobrescribir.");
            }
        }

        // Aplicar configuraciones personalizadas al servicio
        if (!empty($parametros['configuraciones_personalizadas'])) {
            $this->servicioPlanificacion->actualizarConfiguracion($parametros['configuraciones_personalizadas']);
        }

        // Configurar modo de ejecuci√≥n
        $this->configurarModoEjecucion($parametros['modo']);

        if ($this->modoDebug) {
            $this->line("   üîç Iniciando servicio de planificaci√≥n...");
        }

        // Ejecutar solo validaciones si se solicit√≥
        if ($parametros['validar_solo']) {
            return $this->ejecutarSoloValidaciones($fechaPlanificacion);
        }

        // Ejecutar planificaci√≥n completa
        $tiempoInicio = microtime(true);
        $resultado = $this->servicioPlanificacion->ejecutarPlanificacionCompleta($fechaPlanificacion);
        $tiempoTotal = microtime(true) - $tiempoInicio;

        // Agregar m√©tricas adicionales al resultado
        $resultado['tiempo_total_comando'] = round($tiempoTotal, 2);
        $resultado['modo_ejecucion'] = $parametros['modo'];
        $resultado['ejecutado_via'] = 'comando_artisan';

        if ($this->modoDebug) {
            $this->mostrarDetallesDebug($resultado);
        }

        return $resultado;
    }

    /**
     * Mostrar resumen final de todos los resultados
     */
    private function mostrarResumenFinal($resultados, $errores)
    {
        $this->line('');
        $this->info('üìä RESUMEN FINAL:');
        $this->line('');

        // Estad√≠sticas generales
        $totalDias = count($resultados) + count($errores);
        $diasExitosos = count($resultados);
        $diasConError = count($errores);

        $this->line("   üìÖ D√≠as procesados: {$totalDias}");
        $this->line("   ‚úÖ D√≠as exitosos: {$diasExitosos}");
        $this->line("   ‚ùå D√≠as con errores: {$diasConError}");

        if (!empty($resultados)) {
            $this->line('');
            $this->info('   üéØ Resultados exitosos:');

            $totalAsignaciones = 0;
            $totalValidaciones = 0;
            $tiempoTotal = 0;

            foreach ($resultados as $resultado) {
                $fecha = $resultado['fecha_servicio'] ?? 'N/A';
                $asignaciones = $resultado['conductores_asignados'] ?? 0;
                $validaciones = $resultado['validaciones_generadas'] ?? 0;
                $tiempo = $resultado['tiempo_procesamiento'] ?? 0;

                $this->line("     ‚Ä¢ {$fecha}: {$asignaciones} asignaciones, {$validaciones} validaciones ({$tiempo}s)");

                $totalAsignaciones += $asignaciones;
                $totalValidaciones += $validaciones;
                $tiempoTotal += $tiempo;
            }

            $this->line('');
            $this->line("   üìà Totales: {$totalAsignaciones} asignaciones, {$totalValidaciones} validaciones");
            $this->line("   ‚è±Ô∏è Tiempo total: {$tiempoTotal} segundos");
        }

        if (!empty($errores)) {
            $this->line('');
            $this->error('   üí• Errores encontrados:');
            foreach ($errores as $error) {
                $this->line("     ‚Ä¢ {$error['fecha']}: {$error['error']}");
            }
        }

        $this->line('');
    }

    /**
     * Validaciones espec√≠ficas del sistema
     */
    private function validarBaseDatos()
    {
        try {
            \DB::connection()->getPdo();
            $tablas = ['conductores', 'plantillas', 'turnos', 'validaciones'];

            foreach ($tablas as $tabla) {
                if (!\Schema::hasTable($tabla)) {
                    return ['valido' => false, 'mensaje' => "Tabla {$tabla} no existe"];
                }
            }

            return ['valido' => true, 'mensaje' => 'Conectada y tablas verificadas'];
        } catch (Exception $e) {
            return ['valido' => false, 'mensaje' => 'Error de conexi√≥n: ' . $e->getMessage()];
        }
    }

    private function validarConductoresDisponibles()
    {
        $conductoresDisponibles = \App\Models\Conductor::where('estado', 'DISPONIBLE')->count();

        if ($conductoresDisponibles < 5) {
            return ['valido' => false, 'mensaje' => "Solo {$conductoresDisponibles} conductores disponibles (m√≠nimo 5)"];
        }

        return ['valido' => true, 'mensaje' => "{$conductoresDisponibles} conductores disponibles"];
    }

    private function validarConfiguracion()
    {
        $configuracionesRequeridas = [
            'dias_maximos_sin_descanso',
            'eficiencia_minima_conductor',
            'puntualidad_minima_conductor'
        ];

        foreach ($configuracionesRequeridas as $config) {
            if (!Parametro::obtenerValor($config)) {
                return ['valido' => false, 'mensaje' => "Configuraci√≥n {$config} no encontrada"];
            }
        }

        return ['valido' => true, 'mensaje' => 'Configuraciones v√°lidas'];
    }

    private function validarServicios()
    {
        // Validar que los servicios cr√≠ticos est√©n funcionando
        try {
            $this->servicioPlanificacion->obtenerMetricas();
            return ['valido' => true, 'mensaje' => 'Servicios operativos'];
        } catch (Exception $e) {
            return ['valido' => false, 'mensaje' => 'Error en servicios: ' . $e->getMessage()];
        }
    }

    private function configurarModoEjecucion($modo)
    {
        switch ($modo) {
            case 'emergencia':
                // Configuraci√≥n para planificaci√≥n de emergencia
                $this->servicioPlanificacion->actualizarConfiguracion([
                    'tolerancia_eficiencia' => 70, // M√°s flexible
                    'permitir_sobrecarga' => true,
                    'validaciones_estrictas' => false
                ]);
                break;

            case 'manual':
                // Configuraci√≥n para revisi√≥n manual posterior
                $this->servicioPlanificacion->actualizarConfiguracion([
                    'generar_mas_validaciones' => true,
                    'marcar_para_revision' => true
                ]);
                break;

            default: // automatico
                // Usar configuraci√≥n est√°ndar
                break;
        }
    }

    private function ejecutarSoloValidaciones($fechaPlanificacion)
    {
        $this->line("   üîç Ejecutando solo validaciones para {$fechaPlanificacion->format('Y-m-d')}");

        // Implementar l√≥gica de solo validaciones
        // Por ahora, simular resultado
        return [
            'fecha_servicio' => $fechaPlanificacion->format('Y-m-d'),
            'tipo_ejecucion' => 'SOLO_VALIDACIONES',
            'validaciones_generadas' => 5,
            'estado' => 'COMPLETADO'
        ];
    }

    private function mostrarDetallesDebug($resultado)
    {
        $this->line("   üîç Debug - Detalles del resultado:");
        $this->line("     - Plantilla ID: " . ($resultado['plantilla_id'] ?? 'N/A'));
        $this->line("     - Total turnos: " . ($resultado['total_turnos'] ?? 'N/A'));
        $this->line("     - Tiempo procesamiento: " . ($resultado['tiempo_procesamiento'] ?? 'N/A') . 's');

        if (isset($resultado['metricas'])) {
            $this->line("     - M√©tricas:");
            foreach ($resultado['metricas'] as $clave => $valor) {
                $this->line("       ‚Ä¢ {$clave}: {$valor}");
            }
        }
    }

    private function enviarNotificaciones($resultados, $errores)
    {
        $this->info("üìß Enviando notificaciones...");

        // Implementar l√≥gica de notificaciones
        // Por ahora, solo log
        $resumen = [
            'total_procesados' => count($resultados) + count($errores),
            'exitosos' => count($resultados),
            'errores' => count($errores),
            'fecha_ejecucion' => now()->format('Y-m-d H:i:s')
        ];

        \Log::info('Planificaci√≥n autom√°tica completada', $resumen);

        $this->line("   ‚úÖ Notificaciones enviadas");
    }
}
